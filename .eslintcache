[{"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/index.tsx":"1","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/reportWebVitals.ts":"2","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/App.tsx":"3","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/store/index.ts":"4","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Main.tsx":"5","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Navigation/header.tsx":"6","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/PiePlot.tsx":"7","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/store/piePlotSlice.ts":"8","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/store/moneyDataSlice.ts":"9","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/store/totalAmountSlice.ts":"10","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/redux/calendar/slice.ts":"11","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/redux/currentSchedule/slice.ts":"12","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/redux/addSchedule/slice.ts":"13","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/CalendarBoard/index.tsx":"14","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Month.tsx":"15","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/TotalAmount.tsx":"16","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/services/calendar.ts":"17","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/services/schedule.ts":"18","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/AddScheduleDialog/edit.tsx":"19","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/CurrentScheduleDialog/income.tsx":"20","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/CurrentScheduleDialog/index.tsx":"21","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/AddScheduleDialog/index.tsx":"22","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/CalendarElement/index.tsx":"23","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Schedule/income.tsx":"24","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Schedule/index.tsx":"25","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/MoneyData/SwitchButton.tsx":"26","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/EditTable.tsx":"27","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/MoneyData/MoneyData.tsx":"28","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/AddScheduleDialog/incomeEdit.tsx":"29","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/EditIncome.tsx":"30","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/auth/Login.tsx":"31","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/firebase.ts":"32","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/auth/PrivateRoute.tsx":"33","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/auth/AuthProvider.tsx":"34"},{"size":571,"mtime":1612858939573,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1612858858304,"results":"37","hashOfConfig":"36"},{"size":677,"mtime":1613551594893,"results":"38","hashOfConfig":"36"},{"size":1040,"mtime":1613439459775,"results":"39","hashOfConfig":"40"},{"size":595,"mtime":1613540874163,"results":"41","hashOfConfig":"36"},{"size":1947,"mtime":1613609826190,"results":"42","hashOfConfig":"36"},{"size":3053,"mtime":1613467956920,"results":"43","hashOfConfig":"36"},{"size":2169,"mtime":1612858939574,"results":"44","hashOfConfig":"36"},{"size":6130,"mtime":1613531747632,"results":"45","hashOfConfig":"36"},{"size":2532,"mtime":1613523894043,"results":"46","hashOfConfig":"36"},{"size":692,"mtime":1612862805329,"results":"47","hashOfConfig":"36"},{"size":1600,"mtime":1612943943722,"results":"48","hashOfConfig":"36"},{"size":6773,"mtime":1613532649125,"results":"49","hashOfConfig":"36"},{"size":8367,"mtime":1613532812669,"results":"50","hashOfConfig":"36"},{"size":1105,"mtime":1612859162409,"results":"51","hashOfConfig":"36"},{"size":1052,"mtime":1613439459774,"results":"52","hashOfConfig":"36"},{"size":1981,"mtime":1612860390430,"results":"53","hashOfConfig":"36"},{"size":698,"mtime":1613532846014,"results":"54","hashOfConfig":"36"},{"size":7277,"mtime":1613553424768,"results":"55","hashOfConfig":"36"},{"size":4138,"mtime":1613443039647,"results":"56","hashOfConfig":"36"},{"size":4111,"mtime":1613442346698,"results":"57","hashOfConfig":"36"},{"size":10423,"mtime":1613610767508,"results":"58","hashOfConfig":"36"},{"size":2754,"mtime":1613533006612,"results":"59","hashOfConfig":"36"},{"size":771,"mtime":1613470210788,"results":"60","hashOfConfig":"36"},{"size":775,"mtime":1613366358481,"results":"61","hashOfConfig":"36"},{"size":4702,"mtime":1613531632051,"results":"62","hashOfConfig":"36"},{"size":6013,"mtime":1613467956918,"results":"63","hashOfConfig":"36"},{"size":1779,"mtime":1613530364198,"results":"64","hashOfConfig":"36"},{"size":6975,"mtime":1613527017623,"results":"65","hashOfConfig":"36"},{"size":6109,"mtime":1613531767211,"results":"66","hashOfConfig":"36"},{"size":1355,"mtime":1613552217227,"results":"67","hashOfConfig":"36"},{"size":652,"mtime":1613609496573,"results":"68","hashOfConfig":"36"},{"size":572,"mtime":1613546328513,"results":"69","hashOfConfig":"36"},{"size":1356,"mtime":1613610593083,"results":"70","hashOfConfig":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"bapnxl",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"mi9w08",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"127"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/index.tsx",[],["158","159"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/reportWebVitals.ts",[],["160","161"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/App.tsx",["162","163","164"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/store/index.ts",[],["165","166"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Main.tsx",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Navigation/header.tsx",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/PiePlot.tsx",["167"],"import React, { useEffect, useState } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectDataDaily, fetchDataDaily } from \"../store/piePlotSlice\";\nimport Month from \"../components/Month\";\nimport dayjs from \"dayjs\";\nimport TotalAmount from \"../components/TotalAmount\";\nimport { fetchInitialState, fetchTotalIncome } from \"../store/totalAmountSlice\";\n\nconst PiePlot: React.FC = () => {\n  const dataDaily = useSelector(selectDataDaily);\n  const [amount, setAmount] = useState<Array<number>>([]);\n  const [userNum, setUserNum] = useState(\"abcde\");\n  const [year, setYear] = useState(dayjs().year());\n  const [month, setMonth] = useState(dayjs().month() + 1);\n\n  const onClickPreviousMonth = () => {\n    const day = dayjs(`${year}-${month}`).add(-1, \"month\");\n    setYear(day.year());\n    setMonth(day.month() + 1);\n    setArg({ userNum: userNum, year: day.year(), month: day.month() + 1 });\n  };\n\n  const onClickNextMonth = () => {\n    const day = dayjs(`${year}-${month}`).add(1, \"month\");\n    console.log(day);\n    setYear(day.year());\n    setMonth(day.month() + 1);\n    setArg({ userNum: userNum, year: day.year(), month: day.month() + 1 });\n  };\n\n  const dispatch = useDispatch();\n  const [arg, setArg] = useState<{\n    userNum: string;\n    year: number;\n    month: number;\n  }>({ userNum: userNum, year: year, month: month });\n\n  useEffect(() => {\n    dispatch(fetchDataDaily(arg));\n    dispatch(fetchInitialState(arg));\n    dispatch(fetchTotalIncome(arg));\n  }, [dispatch, arg]);\n\n  //PieChart\n  const createPiePlotData = (amount: Array<number>) => {\n    let data = {\n      labels: [\"食費\", \"日用品\", \"衣服\", \"交通費\", \"その他\"],\n      datasets: [\n        {\n          data: amount,\n          backgroundColor: [\n            \"#FFB6C1\",\n            \"#4169E1\",\n            \"#FFCE56\",\n            \"#008B8B\",\n            \"#A9A9A9\",\n          ],\n          hoverBackgroundColor: [\n            \"#FFB6C1\",\n            \"#4169E1\",\n            \"#FFCE56\",\n            \"#008B8B\",\n            \"#A9A9A9\",\n          ],\n          borderColor: [\n            \"transparent\",\n            \"transparent\",\n            \"transparent\",\n            \"transparent\",\n            \"transparent\",\n          ],\n        },\n      ],\n    };\n    return data;\n  };\n\n  const options = {\n    maintainAspectRatio: false,\n    responsive: false,\n    legend: { display: true },\n  };\n  const [piePlotData, setPiePlotData] = useState(createPiePlotData(amount));\n\n  useEffect(() => {\n    setAmount(dataDaily);\n  }, [dataDaily]);\n\n  useEffect(() => {\n    setPiePlotData(createPiePlotData(amount));\n  }, [amount]);\n\n  return (\n    <div>\n      <div className=\"inc-exp-container\">\n        <Month\n          onClickNextMonth={onClickNextMonth}\n          onClickPreviousMonth={onClickPreviousMonth}\n          year={arg.year}\n          month={arg.month}\n        />\n        <Pie data={piePlotData} options={options} width={300} height={300} />\n        <TotalAmount />\n      </div>\n    </div>\n  );\n};\n\nexport default PiePlot;\n",["168","169"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/store/piePlotSlice.ts",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/store/moneyDataSlice.ts",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/store/totalAmountSlice.ts",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/redux/calendar/slice.ts",[],["170","171"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/redux/currentSchedule/slice.ts",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/redux/addSchedule/slice.ts",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/CalendarBoard/index.tsx",["172","173"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Month.tsx",[],["174","175"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/TotalAmount.tsx",[],["176","177"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/services/calendar.ts",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/services/schedule.ts",[],["178","179"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/AddScheduleDialog/edit.tsx",["180","181","182","183"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  Input,\n  Grid,\n  Select,\n  MenuItem,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  CategoryOutlined,\n  NoteOutlined,\n  AccessTime,\n  Close,\n} from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport dayjs from \"dayjs\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { updateExpense, ItemType } from \"../../redux/addSchedule/slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst spacer = { margin: \"4px, 0\" };\n\nconst styles: { [key: string]: React.CSSProperties } = {\n  closeButton: {\n    textAlign: \"right\",\n  },\n  expenseButton: {\n    backgroundColor: \"#F08080\",\n  },\n  incomeButton: {\n    backgroundColor: \"#F08080\",\n  },\n  saveButton: {\n    backgroundColor: \"#87CEFA\",\n  },\n  button: {\n    backgroundColor: \"#FFFFFF\",\n    color: \"#4169E1\",\n    border: \"1px solid #4169E1\",\n  },\n};\n\nconst Title = withStyles({\n  root: { marginBottom: 32, fontSize: 22 },\n})(Input);\n\ntype Props = {\n  doClose: () => void;\n  isEditOpen: boolean;\n  currentData: ItemType | null;\n  ArrayData: Array<ItemType>;\n};\n\nexport type EditItemType = {\n  moneyId: number;\n  userNum: string;\n  amount: number;\n  jenre: string;\n  details: string;\n  date: dayjs.Dayjs | null;\n};\n\n//金額入力フォーム\nconst UpDateMoneyDialog: React.FC<Props> = React.memo((props) => {\n  const { isEditOpen, doClose, currentData, ArrayData } = props;\n\n  //編集したいデータのidと一致する物を抽出（idは唯一の値なので抽出できる値は一つだけ）\n  const newData = ArrayData.filter((s) => s.moneyId === currentData?.moneyId);\n\n  const [amount, setAmount] = useState(0);\n  const [expenseJenre, setExpenseJenre] = useState(\"食費\");\n  const [details, setDetails] = useState(\"\");\n  const [date, setDate] = useState<dayjs.Dayjs | null>(dayjs());\n  const [userNum, seUserNum] = useState<string>(\"abc\");\n  const [moneyId, setMoneyId] = useState(0);\n\n  //編集したいデータをvalueにつめる(条件分岐で支出か収入かを分ける)\n  useEffect(() => {\n    console.log(\"setNewData\");\n    if (newData !== null) {\n      for (let n of newData) {\n        setMoneyId(n.moneyId);\n        setAmount(n.amount);\n        setExpenseJenre(n.jenre);\n        setDetails(n.details);\n        setDate(dayjs(n.date));\n      }\n    }\n  }, [currentData, ArrayData]);\n\n  //金額をセット\n  const handleAmountValue = (value: string) => {\n    setAmount(Number(value));\n  };\n  //カテゴリーをセット\n  const handleExpenseJenreValue = (value: string) => {\n    setExpenseJenre(value);\n  };\n\n  //メモをセット\n  const handleDetailsValue = (value: string) => {\n    setDetails(value);\n  };\n  // //日付をセット\n  const handleDateValue = (value: Date | null) => {\n    let newDay = null;\n    if (value != null) {\n      newDay = dayjs(value);\n    }\n    setDate(newDay);\n  };\n\n  //valueをまとめて送るためのオブジェクト\n  const [arg, setArg] = useState<EditItemType>({\n    moneyId: 0,\n    userNum: \"\",\n    amount: 0,\n    jenre: \"\",\n    details: \"\",\n    date: dayjs(),\n  });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setArg({\n      moneyId: moneyId,\n      userNum: userNum,\n      amount: amount,\n      jenre: expenseJenre,\n      details: details,\n      date: date,\n    });\n  }, [userNum, amount, expenseJenre, details, date]);\n\n  //保存したら元のデータをつめる\n  const handleSaveData = () => {\n    dispatch(updateExpense(arg));\n\n    doClose();\n\n    if (newData !== null) {\n      for (let n of newData) {\n        setAmount(n.amount);\n        setExpenseJenre(n.jenre);\n        setDetails(n.details);\n        setDate(dayjs(n.date));\n      }\n    }\n  };\n\n  //クローズしたら現在のダイアログの値を再度セットする\n  const handleClose = useCallback(() => {\n    doClose();\n\n    if (newData !== null) {\n      for (let n of newData) {\n        setAmount(n.amount);\n        setExpenseJenre(n.jenre);\n        setDetails(n.details);\n        setDate(dayjs(n.date));\n      }\n    }\n  }, [doClose, expenseJenre, newData]);\n\n  return (\n    <Dialog open={isEditOpen} onClose={handleClose} maxWidth=\"xs\" fullWidth>\n      <DialogActions>\n        <div style={styles.closeButton}>\n          <IconButton onClick={handleClose} size=\"small\">\n            <Close />\n          </IconButton>\n        </div>\n      </DialogActions>\n      <Typography align=\"center\" variant=\"h5\">\n        編集\n      </Typography>\n      <DialogContent>\n        <Title\n          autoFocus\n          fullWidth\n          placeholder=\"金額\"\n          value={amount}\n          onChange={(e) => {\n            handleAmountValue(e.target.value);\n          }}\n        />\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <CategoryOutlined />\n          </Grid>\n          <Grid item xs={10}>\n            <Select\n              value={expenseJenre}\n              onChange={(e) => {\n                handleExpenseJenreValue(e.target.value as string);\n              }}\n              fullWidth\n              autoFocus\n            >\n              <MenuItem value=\"食費\">食費</MenuItem>\n              <MenuItem value=\"日用品\">日用品</MenuItem>\n              <MenuItem value=\"衣服\">衣服</MenuItem>\n              <MenuItem value=\"交通費\">交通費</MenuItem>\n              <MenuItem value=\"家賃・光熱費\">家賃・光熱費</MenuItem>\n              <MenuItem value=\"趣味\">趣味</MenuItem>\n              <MenuItem value=\"美容\">美容</MenuItem>\n              <MenuItem value=\"医療費\">医療費</MenuItem>\n              <MenuItem value=\"その他\">その他</MenuItem>\n            </Select>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <NoteOutlined />\n          </Grid>\n          <Grid item xs={10}>\n            <TextField\n              style={spacer}\n              fullWidth\n              placeholder=\"メモ\"\n              value={details}\n              onChange={(e) => {\n                handleDetailsValue(e.target.value);\n              }}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <AccessTime />\n          </Grid>\n          <Grid item xs={10}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker\n                value={date}\n                onChange={(d) => handleDateValue(d)}\n                variant=\"inline\"\n                format=\"yyyy年M月d日\"\n                animateYearScrolling\n                disableToolbar\n                fullWidth\n                style={spacer}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          style={styles.saveButton}\n          variant=\"outlined\"\n          onClick={() => handleSaveData()}\n        >\n          保存\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n});\n\nexport default UpDateMoneyDialog;\n","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/CurrentScheduleDialog/income.tsx",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/CurrentScheduleDialog/index.tsx",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/AddScheduleDialog/index.tsx",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/CalendarElement/index.tsx",[],["184","185"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Schedule/income.tsx",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/Schedule/index.tsx",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/MoneyData/SwitchButton.tsx",["186"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectIncomeData, selectMoneyData } from \"../../store/moneyDataSlice\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport MaterialTable from \"material-table\";\nimport EditTable from \"../EditTable\";\nimport dayjs from \"dayjs\";\nimport { ItemType } from \"../../redux/addSchedule/slice\";\nimport { EditItemType } from \"../../components/AddScheduleDialog/edit\";\nimport EditIncome from \"../EditIncome\";\n\nexport type EditIncomeType = {\n  incomeId: number;\n  userNum: string;\n  income: number;\n  jenre: string;\n  details: string;\n  date: dayjs.Dayjs | null;\n};\n\nconst SwitchButton: React.FC = () => {\n  const moneyData = useSelector(selectMoneyData);\n  const incomeData = useSelector(selectIncomeData);\n  console.log(\"moneyData\", moneyData);\n  console.log(\"incomeData\", incomeData);\n  const [money, setMoney] = useState<Array<object>>([]);\n  const [income, setIncome] = useState<Array<object>>([]);\n  const [changeDate, setChangeDate] = useState<dayjs.Dayjs | null>(dayjs());\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [moneyInfo, setMoneyInfo] = useState<EditItemType>({\n    userNum: \"abcde\",\n    moneyId: 0,\n    amount: 0,\n    jenre: \"\",\n    date: dayjs(),\n    details: \"\",\n  });\n  const [incomeInfo, setIncomeInfo] = useState<EditIncomeType>({\n    userNum: \"abcde\",\n    incomeId: 0,\n    income: 0,\n    jenre: \"\",\n    date: dayjs(),\n    details: \"\",\n  });\n\n  const dataList = useMemo(() => {\n    const moneyDataList: Array<ItemType> = [];\n    for (var i of moneyData) {\n      const data: ItemType = {\n        moneyId: i.moneyId,\n        userNum: i.userNum,\n        amount: i.amount,\n        jenre: i.jenre,\n        date: i.date,\n        details: i.details,\n      };\n      moneyDataList.push(data);\n    }\n    return moneyDataList;\n  }, [moneyData]);\n\n  const incomeList = useMemo(() => {\n    const incomeDataList: Array<EditIncomeType> = [];\n    for (var i of incomeData) {\n      const data: EditIncomeType = {\n        incomeId: i.incomeId,\n        userNum: i.userNum,\n        income: i.income,\n        jenre: i.jenre,\n        date: i.date,\n        details: i.details,\n      };\n      incomeDataList.push(data);\n    }\n    return incomeDataList;\n  }, [incomeData]);\n\n  useEffect(() => {\n    setMoney(dataList);\n    setIncome(incomeList);\n  }, [dataList, incomeList]);\n\n  //ダイアログを表示させるメソッド\n  const onClickOpen = (rowData: EditItemType) => {\n    setDialogOpen(true);\n    setMoneyInfo(rowData);\n  };\n\n  const onClickIncome = (rowData: EditIncomeType) => {\n    setDialogOpen(true);\n    setIncomeInfo(rowData);\n  };\n\n  const handleClose = () => {\n    setDialogOpen(false);\n  };\n\n  return (\n    <div>\n      <Tabs>\n        <TabList>\n          <Tab>支出</Tab>\n          <Tab>収入</Tab>\n        </TabList>\n        <TabPanel>\n          <MaterialTable\n            title={\"支出一覧\"}\n            columns={[\n              { title: \"日付\", field: \"date\" },\n              { title: \"ジャンル\", field: \"jenre\" },\n              { title: \"価格(円)\", field: \"amount\" },\n              { title: \"詳細\", field: \"details\" },\n            ]}\n            data={money}\n            actions={[\n              {\n                icon: \"edit\",\n                tooltip: \"Edit Item\",\n                onClick: (_, rowData) => {\n                  onClickOpen(rowData as EditItemType);\n                },\n              },\n            ]}\n          />\n          <EditTable\n            newDate={changeDate}\n            isOpen={dialogOpen}\n            doClose={() => handleClose()}\n            moneyInfo={moneyInfo}\n          ></EditTable>\n        </TabPanel>\n\n        <TabPanel>\n          <MaterialTable\n            title={\"収入一覧\"}\n            columns={[\n              { title: \"日付\", field: \"date\" },\n              { title: \"ジャンル\", field: \"jenre\" },\n              { title: \"価格(円)\", field: \"income\" },\n              { title: \"詳細\", field: \"details\" },\n            ]}\n            data={income}\n            actions={[\n              {\n                icon: \"edit\",\n                tooltip: \"Edit Item\",\n                onClick: (_, rowData) => {\n                  console.log(\"rewData\", rowData);\n                  onClickIncome(rowData as EditIncomeType);\n                },\n              },\n            ]}\n          />\n          <EditIncome\n            newDate={changeDate}\n            isOpen={dialogOpen}\n            doClose={() => handleClose()}\n            incomeInfo={incomeInfo}\n          ></EditIncome>\n        </TabPanel>\n      </Tabs>\n    </div>\n  );\n};\nexport default SwitchButton;\n",["187","188"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/EditTable.tsx",["189","190","191","192"],"import React, { useEffect, useState, useMemo } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  Input,\n  Grid,\n  Select,\n  MenuItem,\n  IconButton,\n} from \"@material-ui/core\";\nimport {\n  CategoryOutlined,\n  NoteOutlined,\n  AccessTime,\n  Delete,\n  Close,\n} from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport dayjs from \"dayjs\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  deleteExpenses,\n  fetchUpdateData,\n  selectMoneyData,\n} from \"../store/moneyDataSlice\";\nimport { EditItemType } from \"../components/AddScheduleDialog/edit\";\nconst spacer = { margin: \"4px, 0\" };\n\nconst styles: { [key: string]: React.CSSProperties } = {\n  closeButton: {\n    textAlign: \"right\",\n  },\n};\n\nconst Title = withStyles({\n  root: { marginBottom: 32, fontSize: 22 },\n})(Input);\n\ntype Props = {\n  newDate: dayjs.Dayjs | null;\n  isOpen: boolean;\n  doClose: () => void;\n  moneyInfo: EditItemType;\n};\n\nconst EditTable: React.FC<Props> = (props) => {\n  const { isOpen, doClose, moneyInfo } = props;\n  const [moneyId, setMoneyId] = useState(moneyInfo.moneyId);\n  const [amount, setAmount] = useState(moneyInfo.amount);\n  const [jenre, setJenre] = useState(moneyInfo.jenre);\n  const [details, setDetails] = useState(moneyInfo.details);\n  const [date, setDate] = useState<dayjs.Dayjs | null>(moneyInfo.date);\n  const [userNum, seUserNum] = useState<string>(\"abcde\");\n\n  useEffect(() => {\n    setMoneyId(moneyInfo.moneyId);\n    setAmount(moneyInfo.amount);\n    setJenre(moneyInfo.jenre);\n    setDetails(moneyInfo.details);\n    setDate(moneyInfo.date);\n  }, [\n    moneyInfo.amount,\n    moneyInfo.jenre,\n    moneyInfo.details,\n    moneyInfo.date,\n    moneyInfo.moneyId,\n  ]);\n\n  //金額をセット\n  const handleAmountValue = (value: string) => {\n    setAmount(Number(value));\n  };\n  //カテゴリーをセット\n  const handleJenreValue = (value: string) => {\n    setJenre(value);\n  };\n  //メモをセット\n  const handleDetailsValue = (value: string) => {\n    setDetails(value);\n  };\n  // //日付をセット\n  const handleDateValue = (value: Date | null) => {\n    let newDay = null;\n    if (value != null) {\n      newDay = dayjs(value);\n    }\n    setDate(newDay);\n  };\n\n  const [arg, setArg] = useState<EditItemType>({\n    moneyId: 0,\n    userNum: \"\",\n    amount: 0,\n    jenre: \"\",\n    details: \"\",\n    date: dayjs(),\n  });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (date != null) {\n      setArg({\n        moneyId: moneyId,\n        userNum: userNum,\n        amount: amount,\n        jenre: jenre,\n        details: details,\n        date: date,\n      });\n    }\n  }, [moneyId, userNum, amount, jenre, details, date]);\n\n  const handleSaveData = () => {\n    setArg({\n      moneyId: moneyId,\n      userNum: userNum,\n      amount: amount,\n      jenre: jenre,\n      details: details,\n      date: date!,\n    });\n    console.log(\"arg\", arg);\n    dispatch(fetchUpdateData(arg));\n\n    doClose();\n  };\n\n  //削除の処理\n  const handleDeteleSchedule = () => {\n    console.log(moneyId);\n    dispatch(deleteExpenses(arg));\n    doClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={doClose} maxWidth=\"xs\" fullWidth>\n      <DialogActions>\n        <IconButton onClick={handleDeteleSchedule} size=\"small\">\n          <Delete />\n        </IconButton>\n        <div style={styles.closeButton}>\n          <IconButton onClick={doClose} size=\"small\">\n            <Close />\n          </IconButton>\n        </div>\n      </DialogActions>\n      <DialogContent>\n        <Title\n          autoFocus\n          fullWidth\n          placeholder=\"金額\"\n          value={amount}\n          onChange={(e) => {\n            handleAmountValue(e.target.value);\n          }}\n        />\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <CategoryOutlined />\n          </Grid>\n          <Grid item xs={10}>\n            <Select\n              value={jenre}\n              onChange={(e) => {\n                handleJenreValue(e.target.value as string);\n              }}\n              fullWidth\n              autoFocus\n            >\n              <MenuItem value=\"食費\">食費</MenuItem>\n              <MenuItem value=\"日用品\">日用品</MenuItem>\n              <MenuItem value=\"衣服\">衣服</MenuItem>\n              <MenuItem value=\"交通費\">交通費</MenuItem>\n              <MenuItem value=\"その他\">その他</MenuItem>\n            </Select>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <NoteOutlined />\n          </Grid>\n          <Grid item xs={10}>\n            <TextField\n              style={spacer}\n              fullWidth\n              placeholder=\"メモ\"\n              value={details}\n              onChange={(e) => {\n                handleDetailsValue(e.target.value);\n              }}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <AccessTime />\n          </Grid>\n          <Grid item xs={10}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker\n                value={date}\n                onChange={(d) => handleDateValue(d)}\n                variant=\"inline\"\n                format=\"yyyy年M月d日\"\n                animateYearScrolling\n                disableToolbar\n                fullWidth\n                style={spacer}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={() => handleSaveData()}\n        >\n          保存\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default EditTable;\n","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/MoneyData/MoneyData.tsx",["193"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n// import { selectMoneyData } from \"../../store/moneyDataSlice\";\nimport { fetchIncomeData, fetchMoneyData } from \"../../store/moneyDataSlice\";\nimport dayjs from \"dayjs\";\nimport Month from \"../Month\";\nimport SwitchButton from \"./SwitchButton\";\n// type MoneyInfo = { amount: number; jenre: string; date: Date; details: string };\n\nconst MoneyData: React.FC = () => {\n  // const moneyData = useSelector(selectMoneyData);\n  const [userNum, setUserNum] = useState(\"abcde\");\n  const [year, setYear] = useState(dayjs().year());\n  const [month, setMonth] = useState(dayjs().month() + 1);\n  const [arg, setArg] = useState<{\n    userNum: string;\n    year: number;\n    month: number;\n  }>({ userNum: userNum, year: year, month: month });\n\n  const onClickPreviousMonth = () => {\n    const day = dayjs(`${year}-${month}`).add(-1, \"month\");\n    setYear(day.year());\n    setMonth(day.month() + 1);\n    setArg({ userNum: userNum, year: day.year(), month: day.month() + 1 });\n  };\n\n  const onClickNextMonth = () => {\n    const day = dayjs(`${year}-${month}`).add(1, \"month\");\n    setYear(day.year());\n    setMonth(day.month() + 1);\n    setArg({ userNum: userNum, year: day.year(), month: day.month() + 1 });\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchMoneyData(arg));\n    dispatch(fetchIncomeData(arg));\n  }, [dispatch, arg]);\n\n  return (\n    <div>\n      <div className=\"inc-exp-container\">\n        <Month\n          onClickNextMonth={onClickNextMonth}\n          onClickPreviousMonth={onClickPreviousMonth}\n          year={arg.year}\n          month={arg.month}\n        />\n      </div>\n      <SwitchButton></SwitchButton>\n    </div>\n  );\n};\n\nexport default MoneyData;\n","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/AddScheduleDialog/incomeEdit.tsx",["194","195","196","197","198"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  Input,\n  Grid,\n  Select,\n  MenuItem,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport {\n  CategoryOutlined,\n  NoteOutlined,\n  AccessTime,\n  Close,\n} from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport dayjs from \"dayjs\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { IncomeType, updateIncome } from \"../../redux/addSchedule/slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst spacer = { margin: \"4px, 0\" };\n\nconst styles: { [key: string]: React.CSSProperties } = {\n  closeButton: {\n    textAlign: \"right\",\n  },\n  expenseButton: {\n    backgroundColor: \"#F08080\",\n  },\n  incomeButton: {\n    backgroundColor: \"rgb(121, 134, 203)\",\n  },\n  saveButton: {\n    backgroundColor: \"#87CEFA\",\n  },\n  button: {\n    backgroundColor: \"#FFFFFF\",\n    color: \"#4169E1\",\n    border: \"1px solid #4169E1\",\n  },\n};\n\nconst Title = withStyles({\n  root: { marginBottom: 32, fontSize: 22 },\n})(Input);\n\ntype Props = {\n  doClose: () => void;\n  isEditOpen: boolean;\n  currentIncomeData: IncomeType | null;\n  ArrayIncomeData: Array<IncomeType>;\n};\n\nexport type EditIncomeType = {\n  incomeId: number;\n  userNum: string;\n  income: number;\n  jenre: string;\n  details: string;\n  date: dayjs.Dayjs | null;\n};\n\n//金額入力フォーム\nconst UpDateIncomeDialog: React.FC<Props> = React.memo((props) => {\n  const { isEditOpen, doClose, currentIncomeData, ArrayIncomeData } = props;\n\n  //編集したいデータのidと一致する物を抽出（idは唯一の値なので抽出できる値は一つだけ）\n  const newData = ArrayIncomeData.filter(\n    (s) => s.incomeId === currentIncomeData?.incomeId\n  );\n\n  const [amount, setAmount] = useState(0);\n  const [incomeJenre, setIncomeJenre] = useState(\"給料\");\n  const [details, setDetails] = useState(\"\");\n  const [date, setDate] = useState<dayjs.Dayjs | null>(dayjs());\n  const [userNum, seUserNum] = useState<string>(\"abc\");\n  const [dialogStatus, setDialogStatus] = useState(true);\n  const [incomeId, setIncomeId] = useState(0);\n\n  //編集したいデータをvalueにつめる(条件分岐で支出か収入かを分ける)\n  useEffect(() => {\n    if (newData !== null) {\n      for (let n of newData) {\n        setIncomeId(n.incomeId);\n        setAmount(n.income);\n        setIncomeJenre(n.jenre);\n        setDetails(n.details);\n        setDate(dayjs(n.date));\n      }\n    }\n  }, [currentIncomeData, ArrayIncomeData]);\n\n  //金額をセット\n  const handleAmountValue = (value: string) => {\n    setAmount(Number(value));\n  };\n  //カテゴリーをセット\n  const handleIncomeJenreValue = (value: string) => {\n    setIncomeJenre(value);\n  };\n  //メモをセット\n  const handleDetailsValue = (value: string) => {\n    setDetails(value);\n  };\n  // //日付をセット\n  const handleDateValue = (value: Date | null) => {\n    let newDay = null;\n    if (value != null) {\n      newDay = dayjs(value);\n    }\n    setDate(newDay);\n  };\n\n  //valueをまとめて送るためのオブジェクト\n  const [argIncome, setArgIncome] = useState<EditIncomeType>({\n    incomeId: 0,\n    userNum: \"\",\n    income: 0,\n    jenre: \"\",\n    details: \"\",\n    date: dayjs(),\n  });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setArgIncome({\n      incomeId: incomeId,\n      userNum: userNum,\n      income: amount,\n      jenre: incomeJenre,\n      details: details,\n      date: date,\n    });\n  }, [userNum, amount, details, date, incomeJenre, dialogStatus]);\n\n  //保存したら元のデータをつめる\n  const handleSaveData = () => {\n    dispatch(updateIncome(argIncome));\n\n    doClose();\n\n    if (newData !== null) {\n      for (let n of newData) {\n        setAmount(n.income);\n        setIncomeJenre(n.jenre);\n        setDetails(n.details);\n        setDate(dayjs(n.date));\n      }\n    }\n  };\n\n  //クローズしたら現在のダイアログの値を再度セットする\n  const handleClose = useCallback(() => {\n    doClose();\n\n    if (newData !== null) {\n      for (let n of newData) {\n        setAmount(n.income);\n        setIncomeJenre(n.jenre);\n        setDetails(n.details);\n        setDate(dayjs(n.date));\n      }\n    }\n  }, [doClose, incomeJenre, newData]);\n\n  return (\n    <Dialog open={isEditOpen} onClose={handleClose} maxWidth=\"xs\" fullWidth>\n      <DialogActions>\n        <div style={styles.closeButton}>\n          <IconButton onClick={handleClose} size=\"small\">\n            <Close />\n          </IconButton>\n        </div>\n      </DialogActions>\n      <Typography align=\"center\" variant=\"h5\">\n        編集\n      </Typography>\n      <DialogContent>\n        <Title\n          autoFocus\n          fullWidth\n          placeholder=\"金額\"\n          value={amount}\n          onChange={(e) => {\n            handleAmountValue(e.target.value);\n          }}\n        />\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <CategoryOutlined />\n          </Grid>\n          <Grid item xs={10}>\n            <Select\n              value={incomeJenre}\n              onChange={(e) => {\n                handleIncomeJenreValue(e.target.value as string);\n              }}\n              fullWidth\n              autoFocus\n            >\n              <MenuItem value=\"給料\">給料</MenuItem>\n              <MenuItem value=\"その他\">その他</MenuItem>\n            </Select>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <NoteOutlined />\n          </Grid>\n          <Grid item xs={10}>\n            <TextField\n              style={spacer}\n              fullWidth\n              placeholder=\"メモ\"\n              value={details}\n              onChange={(e) => {\n                handleDetailsValue(e.target.value);\n              }}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <AccessTime />\n          </Grid>\n          <Grid item xs={10}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker\n                value={date}\n                onChange={(d) => handleDateValue(d)}\n                variant=\"inline\"\n                format=\"yyyy年M月d日\"\n                animateYearScrolling\n                disableToolbar\n                fullWidth\n                style={spacer}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          style={styles.saveButton}\n          variant=\"outlined\"\n          onClick={() => handleSaveData()}\n        >\n          保存\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n});\n\nexport default UpDateIncomeDialog;\n",["199","200"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/components/EditIncome.tsx",["201","202","203"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  TextField,\n  DialogActions,\n  Button,\n  Input,\n  Grid,\n  Select,\n  MenuItem,\n  IconButton,\n} from \"@material-ui/core\";\nimport {\n  CategoryOutlined,\n  NoteOutlined,\n  AccessTime,\n  Delete,\n  Close,\n} from \"@material-ui/icons\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport dayjs from \"dayjs\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  deleteIncome,\n  fetchUpdateData,\n  fetchUpdateIncome,\n} from \"../store/moneyDataSlice\";\nimport { EditItemType } from \"../components/AddScheduleDialog/edit\";\nimport { EditIncomeType } from \"./AddScheduleDialog/incomeEdit\";\nconst spacer = { margin: \"4px, 0\" };\n\nconst styles: { [key: string]: React.CSSProperties } = {\n  closeButton: {\n    textAlign: \"right\",\n  },\n};\n\nconst Title = withStyles({\n  root: { marginBottom: 32, fontSize: 22 },\n})(Input);\n\ntype Props = {\n  newDate: dayjs.Dayjs | null;\n  isOpen: boolean;\n  doClose: () => void;\n  incomeInfo: EditIncomeType;\n};\n\nconst EditIncome: React.FC<Props> = (props) => {\n  const { isOpen, doClose, incomeInfo } = props;\n\n  const [incomeId, setIncomeId] = useState(incomeInfo.incomeId);\n  const [income, setIncome] = useState(incomeInfo.income);\n  const [jenre, setJenre] = useState(incomeInfo.jenre);\n  const [details, setDetails] = useState(incomeInfo.details);\n  const [date, setDate] = useState<dayjs.Dayjs | null>(incomeInfo.date);\n  const [userNum, seUserNum] = useState<string>(\"abcde\");\n\n  useEffect(() => {\n    setIncomeId(incomeInfo.incomeId);\n    setIncome(incomeInfo.income);\n    setJenre(incomeInfo.jenre);\n    setDetails(incomeInfo.details);\n    setDate(incomeInfo.date);\n  }, [\n    incomeInfo.incomeId,\n    incomeInfo.income,\n    incomeInfo.jenre,\n    incomeInfo.details,\n    incomeInfo.date,\n  ]);\n\n  //金額をセット\n  const handleAmountValue = (value: string) => {\n    setIncome(Number(value));\n  };\n  //カテゴリーをセット\n  const handleJenreValue = (value: string) => {\n    setJenre(value);\n  };\n  //メモをセット\n  const handleDetailsValue = (value: string) => {\n    setDetails(value);\n  };\n  // //日付をセット\n  const handleDateValue = (value: Date | null) => {\n    let newDay = null;\n    if (value != null) {\n      newDay = dayjs(value);\n    }\n    setDate(newDay);\n  };\n\n  const [arg, setArg] = useState<EditIncomeType>({\n    incomeId: 0,\n    userNum: \"\",\n    income: 0,\n    jenre: \"\",\n    details: \"\",\n    date: dayjs(),\n  });\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (date != null) {\n      setArg({\n        incomeId: incomeId,\n        userNum: userNum,\n        income: income,\n        jenre: jenre,\n        details: details,\n        date: date,\n      });\n    }\n  }, [incomeId, userNum, income, jenre, details, date]);\n\n  const handleSaveData = () => {\n    setArg({\n      incomeId: incomeId,\n      userNum: userNum,\n      income: income,\n      jenre: jenre,\n      details: details,\n      date: date!,\n    });\n    console.log(\"arg\", arg);\n    dispatch(fetchUpdateIncome(arg));\n\n    doClose();\n  };\n\n  //削除の処理\n  const handleDeteleSchedule = () => {\n    console.log(\"incomeId\", arg.incomeId);\n    dispatch(deleteIncome(arg));\n    doClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onClose={doClose} maxWidth=\"xs\" fullWidth>\n      <DialogActions>\n        <IconButton onClick={handleDeteleSchedule} size=\"small\">\n          <Delete />\n        </IconButton>\n        <div style={styles.closeButton}>\n          <IconButton onClick={doClose} size=\"small\">\n            <Close />\n          </IconButton>\n        </div>\n      </DialogActions>\n      <DialogContent>\n        <Title\n          autoFocus\n          fullWidth\n          placeholder=\"金額\"\n          value={income}\n          onChange={(e) => {\n            handleAmountValue(e.target.value);\n          }}\n        />\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <CategoryOutlined />\n          </Grid>\n          <Grid item xs={10}>\n            <Select\n              value={jenre}\n              onChange={(e) => {\n                handleJenreValue(e.target.value as string);\n              }}\n              fullWidth\n              autoFocus\n            >\n              <MenuItem value=\"食費\">食費</MenuItem>\n              <MenuItem value=\"日用品\">日用品</MenuItem>\n              <MenuItem value=\"衣服\">衣服</MenuItem>\n              <MenuItem value=\"交通費\">交通費</MenuItem>\n              <MenuItem value=\"その他\">その他</MenuItem>\n            </Select>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <NoteOutlined />\n          </Grid>\n          <Grid item xs={10}>\n            <TextField\n              style={spacer}\n              fullWidth\n              placeholder=\"メモ\"\n              value={details}\n              onChange={(e) => {\n                handleDetailsValue(e.target.value);\n              }}\n            />\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} alignItems=\"center\" justify=\"space-between\">\n          <Grid item>\n            <AccessTime />\n          </Grid>\n          <Grid item xs={10}>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker\n                value={date}\n                onChange={(d) => handleDateValue(d)}\n                variant=\"inline\"\n                format=\"yyyy年M月d日\"\n                animateYearScrolling\n                disableToolbar\n                fullWidth\n                style={spacer}\n              />\n            </MuiPickersUtilsProvider>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          variant=\"outlined\"\n          onClick={() => handleSaveData()}\n        >\n          保存\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default EditIncome;\n","/Users/kajiyamamiyu/Downloads/React App/Money-management/src/auth/Login.tsx",[],["204","205"],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/firebase.ts",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/auth/PrivateRoute.tsx",[],"/Users/kajiyamamiyu/Downloads/React App/Money-management/src/auth/AuthProvider.tsx",["206"],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"207","replacedBy":"211"},{"ruleId":"209","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":1,"column":17,"nodeType":"215","messageId":"216","endLine":1,"endColumn":25},{"ruleId":"213","severity":1,"message":"217","line":1,"column":27,"nodeType":"215","messageId":"216","endLine":1,"endColumn":38},{"ruleId":"213","severity":1,"message":"218","line":6,"column":25,"nodeType":"215","messageId":"216","endLine":6,"endColumn":31},{"ruleId":"207","replacedBy":"219"},{"ruleId":"209","replacedBy":"220"},{"ruleId":"213","severity":1,"message":"221","line":13,"column":19,"nodeType":"215","messageId":"216","endLine":13,"endColumn":29},{"ruleId":"207","replacedBy":"222"},{"ruleId":"209","replacedBy":"223"},{"ruleId":"207","replacedBy":"224"},{"ruleId":"209","replacedBy":"225"},{"ruleId":"213","severity":1,"message":"221","line":95,"column":19,"nodeType":"215","messageId":"216","endLine":95,"endColumn":29},{"ruleId":"226","severity":1,"message":"227","line":126,"column":5,"nodeType":"228","endLine":126,"endColumn":7,"suggestions":"229"},{"ruleId":"207","replacedBy":"230"},{"ruleId":"209","replacedBy":"231"},{"ruleId":"207","replacedBy":"232"},{"ruleId":"209","replacedBy":"233"},{"ruleId":"207","replacedBy":"234"},{"ruleId":"209","replacedBy":"235"},{"ruleId":"213","severity":1,"message":"236","line":81,"column":19,"nodeType":"215","messageId":"216","endLine":81,"endColumn":28},{"ruleId":"226","severity":1,"message":"237","line":96,"column":6,"nodeType":"228","endLine":96,"endColumn":30,"suggestions":"238"},{"ruleId":"226","severity":1,"message":"239","line":141,"column":6,"nodeType":"228","endLine":141,"endColumn":52,"suggestions":"240"},{"ruleId":"226","severity":1,"message":"241","line":171,"column":6,"nodeType":"228","endLine":171,"endColumn":38,"suggestions":"242"},{"ruleId":"207","replacedBy":"243"},{"ruleId":"209","replacedBy":"244"},{"ruleId":"213","severity":1,"message":"245","line":29,"column":22,"nodeType":"215","messageId":"216","endLine":29,"endColumn":35},{"ruleId":"207","replacedBy":"246"},{"ruleId":"209","replacedBy":"247"},{"ruleId":"213","severity":1,"message":"248","line":1,"column":38,"nodeType":"215","messageId":"216","endLine":1,"endColumn":45},{"ruleId":"213","severity":1,"message":"249","line":25,"column":23,"nodeType":"215","messageId":"216","endLine":25,"endColumn":34},{"ruleId":"213","severity":1,"message":"250","line":29,"column":3,"nodeType":"215","messageId":"216","endLine":29,"endColumn":18},{"ruleId":"213","severity":1,"message":"236","line":58,"column":19,"nodeType":"215","messageId":"216","endLine":58,"endColumn":28},{"ruleId":"213","severity":1,"message":"221","line":12,"column":19,"nodeType":"215","messageId":"216","endLine":12,"endColumn":29},{"ruleId":"213","severity":1,"message":"236","line":83,"column":19,"nodeType":"215","messageId":"216","endLine":83,"endColumn":28},{"ruleId":"213","severity":1,"message":"251","line":84,"column":24,"nodeType":"215","messageId":"216","endLine":84,"endColumn":39},{"ruleId":"226","severity":1,"message":"237","line":98,"column":6,"nodeType":"228","endLine":98,"endColumn":42,"suggestions":"252"},{"ruleId":"226","severity":1,"message":"253","line":142,"column":6,"nodeType":"228","endLine":142,"endColumn":65,"suggestions":"254"},{"ruleId":"226","severity":1,"message":"255","line":172,"column":6,"nodeType":"228","endLine":172,"endColumn":37,"suggestions":"256"},{"ruleId":"207","replacedBy":"257"},{"ruleId":"209","replacedBy":"258"},{"ruleId":"213","severity":1,"message":"259","line":28,"column":3,"nodeType":"215","messageId":"216","endLine":28,"endColumn":18},{"ruleId":"213","severity":1,"message":"260","line":31,"column":10,"nodeType":"215","messageId":"216","endLine":31,"endColumn":22},{"ruleId":"213","severity":1,"message":"236","line":60,"column":19,"nodeType":"215","messageId":"216","endLine":60,"endColumn":28},{"ruleId":"207","replacedBy":"261"},{"ruleId":"209","replacedBy":"262"},{"ruleId":"213","severity":1,"message":"263","line":1,"column":17,"nodeType":"215","messageId":"216","endLine":1,"endColumn":28},"no-native-reassign",["264"],"no-negated-in-lhs",["265"],["264"],["265"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useCallback' is defined but never used.","'Router' is defined but never used.",["264"],["265"],"'setUserNum' is assigned a value but never used.",["264"],["265"],["264"],["265"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["266"],["264"],["265"],["264"],["265"],["264"],["265"],"'seUserNum' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'newData'. Either include it or remove the dependency array.",["267"],"React Hook useEffect has a missing dependency: 'moneyId'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setArg' needs the current value of 'moneyId'.",["268"],"React Hook useCallback has an unnecessary dependency: 'expenseJenre'. Either exclude it or remove the dependency array.",["269"],["264"],["265"],"'setChangeDate' is assigned a value but never used.",["264"],["265"],"'useMemo' is defined but never used.","'useSelector' is defined but never used.","'selectMoneyData' is defined but never used.","'setDialogStatus' is assigned a value but never used.",["270"],"React Hook useEffect has a missing dependency: 'incomeId'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setArgIncome' needs the current value of 'incomeId'.",["271"],"React Hook useCallback has an unnecessary dependency: 'incomeJenre'. Either exclude it or remove the dependency array.",["272"],["264"],["265"],"'fetchUpdateData' is defined but never used.","'EditItemType' is defined but never used.",["264"],["265"],"'ContextType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"279","fix":"285"},"Update the dependencies array to be: [dispatch]",{"range":"286","text":"287"},"Update the dependencies array to be: [currentData, ArrayData, newData]",{"range":"288","text":"289"},"Update the dependencies array to be: [userNum, amount, expenseJenre, details, date, moneyId]",{"range":"290","text":"291"},"Update the dependencies array to be: [doClose, newData]",{"range":"292","text":"293"},"Update the dependencies array to be: [currentIncomeData, ArrayIncomeData, newData]",{"range":"294","text":"295"},"Update the dependencies array to be: [userNum, amount, details, date, incomeJenre, dialogStatus, incomeId]",{"range":"296","text":"297"},{"range":"298","text":"293"},[3597,3599],"[dispatch]",[2337,2361],"[currentData, ArrayData, newData]",[3229,3275],"[userNum, amount, expenseJenre, details, date, moneyId]",[3879,3911],"[doClose, newData]",[2431,2467],"[currentIncomeData, ArrayIncomeData, newData]",[3354,3413],"[userNum, amount, details, date, incomeJenre, dialogStatus, incomeId]",[4020,4051]]